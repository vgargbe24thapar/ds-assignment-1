#include <stdio.h>
#include <stdlib.h>

// ==============================
// Doubly Linked List Structure
// ==============================
struct Node {
    int data;
    struct Node *next, *prev;
};

// Function to insert node at end
// Time: O(n), Space: O(1)
void insertEnd(struct Node **head, int data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    if (*head == NULL) {
        newNode->prev = NULL;
        *head = newNode;
        return;
    }
    struct Node *temp = *head;
    while (temp->next)
        temp = temp->next;
    temp->next = newNode;
    newNode->prev = temp;
}

// ==============================
// Reverse DLL in groups of k nodes
// Time: O(n), Space: O(1)
// ==============================
struct Node* reverseInGroups(struct Node *head, int k) {
    struct Node *current = head;
    struct Node *nextNode = NULL;
    struct Node *newHead = NULL;
    int count = 0;

    // Reverse first k nodes
    while (current != NULL && count < k) {
        nextNode = current->next;
        current->next = current->prev;
        current->prev = nextNode;
        newHead = current;
        current = nextNode;
        count++;
    }

    // Recursively call for remaining list
    if (nextNode != NULL) {
        head->next = reverseInGroups(nextNode, k);
        if (head->next != NULL)
            head->next->prev = head;
    }

    // Return new head of this segment
    return newHead;
}

// Display Doubly Linked List
void display(struct Node *head) {
    struct Node *temp = head;
    while (temp) {
        printf("%d", temp->data);
        if (temp->next) printf(" <-> ");
        temp = temp->next;
    }
    printf(" -> NULL\n");
}

// ==============================
// Main Function
// ==============================
int main() {
    struct Node *head = NULL;
    int k = 2; // Change value as needed

    // Example: 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 6
    insertEnd(&head, 1);
    insertEnd(&head, 2);
    insertEnd(&head, 3);
    insertEnd(&head, 4);
    insertEnd(&head, 5);
    insertEnd(&head, 6);

    printf("Original Doubly Linked List:\n");
    display(head);

    printf("\nEnter group size k: ");
    scanf("%d", &k);

    head = reverseInGroups(head, k);

    printf("\nReversed in groups of %d:\n", k);
    display(head);

    return 0;
}
