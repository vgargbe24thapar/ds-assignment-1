#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

class SinglyLinkedList {
private:
    Node* head;

public:
    SinglyLinkedList() : head(nullptr) {}

    void insertAtEnd(int value) {
        Node* newNode = new Node{value, nullptr};
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next) temp = temp->next;
        temp->next = newNode;
    }

    // Find middle node's value
    int findMiddle() {
        if (!head) {
            throw runtime_error("List is empty");
        }

        Node* slow = head;
        Node* fast = head;

        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }

        return slow->data;
    }

    void display() {
        Node* temp = head;
        while (temp) {
            cout << temp->data;
            if (temp->next) cout << "->";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    SinglyLinkedList list;

    // Input: 1->2->3->4->5
    int values[] = {1, 2, 3, 4, 5};
    for (int v : values)
        list.insertAtEnd(v);

    cout << "Linked List: ";
    list.display();

    try {
        int middle = list.findMiddle();
        cout << "Middle element: " << middle << endl;
    } catch (const exception& e) {
        cout << e.what() << endl;
    }

    return 0;
}
