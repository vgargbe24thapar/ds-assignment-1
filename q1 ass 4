#include <iostream>
#define MAX 5  // Maximum size of queue

using namespace std;

class Queue {
    int arr[MAX];
    int front, rear;

public:
    Queue() {
        front = -1;
        rear = -1;
    }

    // Check if queue is full
    bool isFull() {
        // Time Complexity: O(1)
        // Space Complexity: O(1)
        return rear == MAX - 1;
    }

    // Check if queue is empty
    bool isEmpty() {
        // Time Complexity: O(1)
        // Space Complexity: O(1)
        return front == -1 || front > rear;
    }

    // Add element to the queue
    void enqueue(int x) {
        // Time Complexity: O(1)
        // Space Complexity: O(1)
        if (isFull()) {
            cout << "Queue is full! Cannot enqueue " << x << endl;
            return;
        }
        if (isEmpty()) {
            front = 0;
        }
        arr[++rear] = x;
        cout << x << " enqueued to queue" << endl;
    }

    // Remove element from the queue
    void dequeue() {
        // Time Complexity: O(1)
        // Space Complexity: O(1)
        if (isEmpty()) {
            cout << "Queue is empty! Cannot dequeue." << endl;
            return;
        }
        cout << arr[front++] << " dequeued from queue" << endl;
        if (front > rear) {  // Reset queue when empty
            front = rear = -1;
        }
    }

    // Get front element without removing it
    void peek() {
        // Time Complexity: O(1)
        // Space Complexity: O(1)
        if (isEmpty()) {
            cout << "Queue is empty! Nothing to peek." << endl;
            return;
        }
        cout << "Front element is: " << arr[front] << endl;
    }

    // Display all elements of queue
    void display() {
        // Time Complexity: O(n), where n = number of elements in queue
        // Space Complexity: O(1)
        if (isEmpty()) {
            cout << "Queue is empty!" << endl;
            return;
        }
        cout << "Queue elements: ";
        for (int i = front; i <= rear; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Queue q;
    int choice, value;

    do {
        cout << "\nMenu:\n1. Enqueue\n2. Dequeue\n3. Peek\n4. Display\n5. Check if Empty\n6. Check if Full\n7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to enqueue: ";
            cin >> value;
            q.enqueue(value);
            break;
        case 2:
            q.dequeue();
            break;
        case 3:
            q.peek();
            break;
        case 4:
            q.display();
            break;
        case 5:
            cout << (q.isEmpty() ? "Queue is empty" : "Queue is not empty") << endl;
            break;
        case 6:
            cout << (q.isFull() ? "Queue is full" : "Queue is not full") << endl;
            break;
        case 7:
            cout << "Exiting..." << endl;
            break;
        default:
            cout << "Invalid choice! Try again." << endl;
        }
    } while (choice != 7);

    return 0;
}
//enqueue(): O(1) time  O(1) space.

//dequeue(): O(1) time  O(1) space.

//isEmpty() & isFull(): O(1) time and space (simple checks).

//peek(): O(1) time

/display(): O(n)
