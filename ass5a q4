#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

class SinglyLinkedList {
private:
    Node* head;

public:
    SinglyLinkedList() : head(nullptr) {}

    void insertAtEnd(int value) {
        Node* newNode = new Node{value, nullptr};
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next) temp = temp->next;
        temp->next = newNode;
    }

    // Reverse the linked list
    // Time Complexity: O(n)
    // Space Complexity: O(1)
    void reverse() {
        Node* prev = nullptr;
        Node* current = head;
        Node* next = nullptr;

        while (current != nullptr) {
            next = current->next;  // store next node
            current->next = prev;  // reverse current node's pointer
            prev = current;        // move prev and current one step forward
            current = next;
        }
        head = prev;  // new head is the last non-null node
    }

    void display() {
        Node* temp = head;
        while (temp) {
            cout << temp->data;
            if (temp->next) cout << "->";
            temp = temp->next;
        }
        cout << "->NULL\n";
    }
};

int main() {
    SinglyLinkedList list;

    // Input: 1->2->3->4->NULL
    int values[] = {1, 2, 3, 4};
    for (int v : values)
        list.insertAtEnd(v);

    cout << "Original List: ";
    list.display();

    list.reverse();

    cout << "Reversed List: ";
    list.display();

    return 0;
}
