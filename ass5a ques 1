#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

class SinglyLinkedList {
private:
    Node* head;

public:
    SinglyLinkedList() {
        head = nullptr;
    }

    // (a) Insertion at the beginning
    // Time Complexity: O(1)
    // Space Complexity: O(1)
    void insertAtBeginning(int value) {
        Node* newNode = new Node{value, head};
        head = newNode;
        cout << value << " inserted at the beginning.\n";
    }

    // (b) Insertion at the end
    // Time Complexity: O(n)
    // Space Complexity: O(1)
    void insertAtEnd(int value) {
        Node* newNode = new Node{value, nullptr};
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr)
                temp = temp->next;
            temp->next = newNode;
        }
        cout << value << " inserted at the end.\n";
    }

    // (c) Insertion before or after a node with specific value
    // Time Complexity: O(n)
    // Space Complexity: O(1)
    void insertBeforeAfter(int target, int value, bool before) {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }

        if (before) {
            // Insert before target
            if (head->data == target) {
                insertAtBeginning(value);
                return;
            }

            Node* prev = nullptr;
            Node* curr = head;
            while (curr != nullptr && curr->data != target) {
                prev = curr;
                curr = curr->next;
            }

            if (curr == nullptr) {
                cout << "Node with value " << target << " not found.\n";
                return;
            }

            Node* newNode = new Node{value, curr};
            if (prev != nullptr) prev->next = newNode;
            cout << value << " inserted before " << target << ".\n";

        } else {
            // Insert after target
            Node* curr = head;
            while (curr != nullptr && curr->data != target)
                curr = curr->next;

            if (curr == nullptr) {
                cout << "Node with value " << target << " not found.\n";
                return;
            }

            Node* newNode = new Node{value, curr->next};
            curr->next = newNode;
            cout << value << " inserted after " << target << ".\n";
        }
    }

    // (d) Deletion from the beginning
    // Time Complexity: O(1)
    // Space Complexity: O(1)
    void deleteFromBeginning() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        head = head->next;
        cout << temp->data << " deleted from the beginning.\n";
        delete temp;
    }

    // (e) Deletion from the end
    // Time Complexity: O(n)
    // Space Complexity: O(1)
    void deleteFromEnd() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }

        if (head->next == nullptr) {
            cout << head->data << " deleted from the end.\n";
            delete head;
            head = nullptr;
            return;
        }

        Node* temp = head;
        Node* prev = nullptr;
        while (temp->next != nullptr) {
            prev = temp;
            temp = temp->next;
        }

        cout << temp->data << " deleted from the end.\n";
        prev->next = nullptr;
        delete temp;
    }

    // (f) Deletion of a specific node
    // Time Complexity: O(n)
    // Space Complexity: O(1)
    void deleteNode(int value) {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }

        if (head->data == value) {
            deleteFromBeginning();
            return;
        }

        Node* curr = head->next;
        Node* prev = head;

        while (curr != nullptr && curr->data != value) {
            prev = curr;
            curr = curr->next;
        }

        if (curr == nullptr) {
            cout << "Node with value " << value << " not found.\n";
            return;
        }

        prev->next = curr->next;
        cout << curr->data << " deleted from the list.\n";
        delete curr;
    }

    // (g) Search for a node and display its position from head
    // Time Complexity: O(n)
    // Space Complexity: O(1)
    void searchNode(int value) {
        Node* temp = head;
        int pos = 1;
        while (temp != nullptr) {
            if (temp->data == value) {
                cout << "Node with value " << value << " found at position " << pos << ".\n";
                return;
            }
            temp = temp->next;
            pos++;
        }
        cout << "Node with value " << value << " not found.\n";
    }

    // (h) Display all node values
    // Time Complexity: O(n)
    // Space Complexity: O(1)
    void display() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }

        Node* temp = head;
        cout << "List elements: ";
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    SinglyLinkedList list;
    int choice, value, target;
    bool before;

    do {
        cout << "\nMenu:\n";
        cout << "1. Insert at Beginning\n";
        cout << "2. Insert at End\n";
        cout << "3. Insert Before/After a Node\n";
        cout << "4. Delete from Beginning\n";
        cout << "5. Delete from End\n";
        cout << "6. Delete Specific Node\n";
        cout << "7. Search Node\n";
        cout << "8. Display List\n";
        cout << "9. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert at beginning: ";
                cin >> value;
                list.insertAtBeginning(value);
                break;

            case 2:
                cout << "Enter value to insert at end: ";
                cin >> value;
                list.insertAtEnd(value);
                break;

            case 3:
                cout << "Enter the target node value: ";
                cin >> target;
                cout << "Enter value to insert: ";
                cin >> value;
                cout << "Insert before or after? (1 for before, 0 for after): ";
                cin >> before;
                list.insertBeforeAfter(target, value, before);
                break;

            case 4:
                list.deleteFromBeginning();
                break;

            case 5:
                list.deleteFromEnd();
                break;

            case 6:
                cout << "Enter value of node to delete: ";
                cin >> value;
                list.deleteNode(value);
                break;

            case 7:
                cout << "Enter value to search: ";
                cin >> value;
                list.searchNode(value);
                break;

            case 8:
                list.display();
                break;

            case 9:
                cout << "Exiting...\n";
                break;

            default:
                cout << "Invalid choice, try again.\n";
        }
    } while (choice != 9);

    return 0;
}
