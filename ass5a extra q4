#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

class LinkedList {
public:
    Node* head;

    LinkedList() : head(nullptr) {}

    void insertAtEnd(int val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next)
            temp = temp->next;
        temp->next = newNode;
    }

    // Rotate linked list to the left by k positions
    Node* rotateLeft(int k) {
        if (!head || !head->next || k == 0)
            return head;

        // Find length and last node
        Node* temp = head;
        int length = 1;
        while (temp->next) {
            temp = temp->next;
            length++;
        }

        // Make the list circular
        temp->next = head;

        // Find the new tail: move (k % length) steps
        k = k % length;
        Node* newTail = head;
        for (int i = 1; i < k; i++) {
            newTail = newTail->next;
        }

        // New head is next of newTail
        head = newTail->next;

        // Break the loop
        newTail->next = nullptr;

        return head;
    }

    void display(Node* node) {
        Node* temp = node;
        while (temp) {
            cout << temp->data;
            if (temp->next) cout << " -> ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;
    int values[] = {10, 20, 30, 40, 50};
    for (int val : values) {
        list.insertAtEnd(val);
    }

    cout << "Original List: ";
    list.display(list.head);

    int k = 4;
    list.head = list.rotateLeft(k);

    cout << "List after rotating left by " << k << " positions: ";
    list.display(list.head);

    return 0;
}
