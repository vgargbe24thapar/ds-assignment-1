#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Structure for a Doubly Linked List Node
struct Node {
    char data;
    struct Node *prev;
    struct Node *next;
};

// Function to insert node at the end
// Time Complexity: O(n), Space Complexity: O(1)
void insertEnd(struct Node **head, char data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        newNode->prev = NULL;
        *head = newNode;
        return;
    }

    struct Node *temp = *head;
    while (temp->next)
        temp = temp->next;

    temp->next = newNode;
    newNode->prev = temp;
}

// Function to check if DLL is palindrome
// Time Complexity: O(n), Space Complexity: O(1)
bool isPalindrome(struct Node *head) {
    if (head == NULL)
        return true;

    // Find tail pointer
    struct Node *tail = head;
    while (tail->next)
        tail = tail->next;

    // Compare from both ends
    while (head != tail && tail->next != head) {
        if (head->data != tail->data)
            return false;
        head = head->next;
        tail = tail->prev;
    }
    return true;
}

// Display DLL â€” Optional
void display(struct Node *head) {
    while (head) {
        printf("%c ", head->data);
        head = head->next;
    }
    printf("\n");
}

// Main function to test
int main() {
    struct Node *head = NULL;

    // Example input: LEVEL
    insertEnd(&head, 'L');
    insertEnd(&head, 'E');
    insertEnd(&head, 'V');
    insertEnd(&head, 'E');
    insertEnd(&head, 'L');

    printf("Doubly Linked List: ");
    display(head);

    if (isPalindrome(head))
        printf("Output: True\n");
    else
        printf("Output: False\n");

    return 0;
}
