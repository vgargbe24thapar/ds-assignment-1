#include <iostream>
#include <queue>
using namespace std;

// Function to sort the queue using only allowed operations
void sortQueue(queue<int>& q) {
    int n = q.size();

    // Bubble sort logic adapted to queue operations
    for (int i = 0; i < n - 1; i++) {
        // For each pass, the largest unsorted element bubbles to the rear
        for (int j = 0; j < n - i - 1; j++) {
            int first = q.front();
            q.pop();
            int second = q.front();
            q.pop();

            if (first > second) {
                // Swap: enqueue smaller first, then bigger second
                q.push(second);
                q.push(first);
            } else {
                // Keep order: enqueue first then second
                q.push(first);
                q.push(second);
            }
        }

        // After one pass, the largest element is at rear,
        // but we dequeued two elements at a time so we need to rotate
        // the queue to bring remaining elements to front.

        // Rotate the remaining elements that were not compared in this pass
        int rotations = i + 1; // number of elements at rear in correct place
        for (int k = 0; k < rotations; k++) {
            int val = q.front();
            q.pop();
            q.push(val);
        }
    }
}

int main() {
    queue<int> q;

    // Input: 11, 5, 4, 21
    q.push(11);
    q.push(5);
    q.push(4);
    q.push(21);

    cout << "Original queue: ";
    queue<int> temp = q;
    while (!temp.empty()) {
        cout << temp.front() << " ";
        temp.pop();
    }
    cout << endl;

    sortQueue(q);

    cout << "Sorted queue: ";
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << endl;

    return 0;
}
