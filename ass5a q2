#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

class SinglyLinkedList {
private:
    Node* head;

public:
    SinglyLinkedList() : head(nullptr) {}

    void insertAtEnd(int value) {
        Node* newNode = new Node{value, nullptr};
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next) temp = temp->next;
        temp->next = newNode;
    }

    // Count occurrences of key in list
    int countOccurrences(int key) {
        int count = 0;
        Node* temp = head;
        while (temp) {
            if (temp->data == key) count++;
            temp = temp->next;
        }
        return count;
    }

    // Delete all occurrences of key
    void deleteAllOccurrences(int key) {
        // Delete nodes from the start if they match the key
        while (head && head->data == key) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }

        // Delete subsequent nodes
        Node* current = head;
        while (current && current->next) {
            if (current->next->data == key) {
                Node* temp = current->next;
                current->next = temp->next;
                delete temp;
            } else {
                current = current->next;
            }
        }
    }

    void display() {
        if (!head) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        while (temp) {
            cout << temp->data;
            if (temp->next) cout << "->";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    SinglyLinkedList list;

    // Creating the list: 1->2->1->2->1->3->1
    int values[] = {1, 2, 1, 2, 1, 3, 1};
    for (int v : values)
        list.insertAtEnd(v);

    cout << "Original Linked List: ";
    list.display();

    int key = 1;

    int count = list.countOccurrences(key);
    cout << "Count of " << key << ": " << count << endl;

    list.deleteAllOccurrences(key);

    cout << "Updated Linked List: ";
    list.display();

    return 0;
}
